/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.uber.tchannel.schemes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-20")
public class Ex implements org.apache.thrift.TBase<Ex, Ex._Fields>, java.io.Serializable, Cloneable, Comparable<Ex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ex");

  private static final org.apache.thrift.protocol.TField A_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("aString", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AN_INTEGER_FIELD_DESC = new org.apache.thrift.protocol.TField("anInteger", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExTupleSchemeFactory());
  }

  private String aString; // required
  private int anInteger; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A_STRING((short)1, "aString"),
    AN_INTEGER((short)2, "anInteger");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A_STRING
          return A_STRING;
        case 2: // AN_INTEGER
          return AN_INTEGER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANINTEGER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A_STRING, new org.apache.thrift.meta_data.FieldMetaData("aString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AN_INTEGER, new org.apache.thrift.meta_data.FieldMetaData("anInteger", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ex.class, metaDataMap);
  }

  public Ex() {
  }

  public Ex(
    String aString,
    int anInteger)
  {
    this();
    this.aString = aString;
    this.anInteger = anInteger;
    setAnIntegerIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Ex(Ex other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAString()) {
      this.aString = other.aString;
    }
    this.anInteger = other.anInteger;
  }

  public Ex deepCopy() {
    return new Ex(this);
  }

  @Override
  public void clear() {
    this.aString = null;
    setAnIntegerIsSet(false);
    this.anInteger = 0;
  }

  public String getAString() {
    return this.aString;
  }

  public Ex setAString(String aString) {
    this.aString = aString;
    return this;
  }

  public void unsetAString() {
    this.aString = null;
  }

  /** Returns true if field aString is set (has been assigned a value) and false otherwise */
  public boolean isSetAString() {
    return this.aString != null;
  }

  public void setAStringIsSet(boolean value) {
    if (!value) {
      this.aString = null;
    }
  }

  public int getAnInteger() {
    return this.anInteger;
  }

  public Ex setAnInteger(int anInteger) {
    this.anInteger = anInteger;
    setAnIntegerIsSet(true);
    return this;
  }

  public void unsetAnInteger() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANINTEGER_ISSET_ID);
  }

  /** Returns true if field anInteger is set (has been assigned a value) and false otherwise */
  public boolean isSetAnInteger() {
    return EncodingUtils.testBit(__isset_bitfield, __ANINTEGER_ISSET_ID);
  }

  public void setAnIntegerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANINTEGER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case A_STRING:
      if (value == null) {
        unsetAString();
      } else {
        setAString((String)value);
      }
      break;

    case AN_INTEGER:
      if (value == null) {
        unsetAnInteger();
      } else {
        setAnInteger((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case A_STRING:
      return getAString();

    case AN_INTEGER:
      return Integer.valueOf(getAnInteger());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case A_STRING:
      return isSetAString();
    case AN_INTEGER:
      return isSetAnInteger();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Ex)
      return this.equals((Ex)that);
    return false;
  }

  public boolean equals(Ex that) {
    if (that == null)
      return false;

    boolean this_present_aString = true && this.isSetAString();
    boolean that_present_aString = true && that.isSetAString();
    if (this_present_aString || that_present_aString) {
      if (!(this_present_aString && that_present_aString))
        return false;
      if (!this.aString.equals(that.aString))
        return false;
    }

    boolean this_present_anInteger = true;
    boolean that_present_anInteger = true;
    if (this_present_anInteger || that_present_anInteger) {
      if (!(this_present_anInteger && that_present_anInteger))
        return false;
      if (this.anInteger != that.anInteger)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_aString = true && (isSetAString());
    list.add(present_aString);
    if (present_aString)
      list.add(aString);

    boolean present_anInteger = true;
    list.add(present_anInteger);
    if (present_anInteger)
      list.add(anInteger);

    return list.hashCode();
  }

  @Override
  public int compareTo(Ex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAString()).compareTo(other.isSetAString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aString, other.aString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnInteger()).compareTo(other.isSetAnInteger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnInteger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anInteger, other.anInteger);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Ex(");
    boolean first = true;

    sb.append("aString:");
    if (this.aString == null) {
      sb.append("null");
    } else {
      sb.append(this.aString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("anInteger:");
    sb.append(this.anInteger);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExStandardSchemeFactory implements SchemeFactory {
    public ExStandardScheme getScheme() {
      return new ExStandardScheme();
    }
  }

  private static class ExStandardScheme extends StandardScheme<Ex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Ex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // A_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aString = iprot.readString();
              struct.setAStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AN_INTEGER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.anInteger = iprot.readI32();
              struct.setAnIntegerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Ex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.aString != null) {
        oprot.writeFieldBegin(A_STRING_FIELD_DESC);
        oprot.writeString(struct.aString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AN_INTEGER_FIELD_DESC);
      oprot.writeI32(struct.anInteger);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExTupleSchemeFactory implements SchemeFactory {
    public ExTupleScheme getScheme() {
      return new ExTupleScheme();
    }
  }

  private static class ExTupleScheme extends TupleScheme<Ex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Ex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAString()) {
        optionals.set(0);
      }
      if (struct.isSetAnInteger()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAString()) {
        oprot.writeString(struct.aString);
      }
      if (struct.isSetAnInteger()) {
        oprot.writeI32(struct.anInteger);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Ex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.aString = iprot.readString();
        struct.setAStringIsSet(true);
      }
      if (incoming.get(1)) {
        struct.anInteger = iprot.readI32();
        struct.setAnIntegerIsSet(true);
      }
    }
  }

}

